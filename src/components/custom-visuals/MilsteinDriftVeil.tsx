// Themes: stochastic veil, gentle drift, noisy calm
// Visualisation: Paths generated by the Milstein scheme for stochastic differential equations create a drifting veil
// Unique mechanism: Applies the Milstein integrator to a stochastic differential equation for many paths and renders their trails
import React, { useRef, useEffect } from 'react';
import { VisualProps } from '../../types';

interface Path {
  x: number;
  y: number;
  history: number[];
}

const MilsteinDriftVeil: React.FC<VisualProps> = ({ width, height }) => {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const rafRef = useRef<number | undefined>();

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    canvas.width = width;
    canvas.height = height;

    ctx.fillStyle = '#F0EEE6';
    ctx.fillRect(0, 0, width, height);

    const paths: Path[] = Array.from({ length: 160 }).map(() => ({
      x: width * 0.5,
      y: height * (0.2 + Math.random() * 0.6),
      history: [],
    }));
    const maxHistory = 120;
    const dt = 0.016;

    const drift = (y: number, t: number) => 0.4 * Math.sin(t + y * 0.004);
    const diffusion = (y: number) => 0.3 + 0.1 * Math.sin(y * 0.008);

    const render = (time: number) => {
      ctx.fillStyle = 'rgba(240,238,230,0.045)';
      ctx.fillRect(0, 0, width, height);

      const t = time * 0.001;
      ctx.lineWidth = 0.75;
      for (let i = 0; i < paths.length; i++) {
        const path = paths[i];
        const g = diffusion(path.y);
        const gPrime = 0.1 * 0.008 * Math.cos(path.y * 0.008);
        const dW = (Math.random() * 2 - 1) * Math.sqrt(dt);
        path.y += drift(path.y, t) * dt + g * dW + 0.5 * g * gPrime * (dW * dW - dt);
        path.x += (Math.random() * 2 - 1) * 2;
        if (path.y < height * 0.1 || path.y > height * 0.9 || path.x < width * 0.05 || path.x > width * 0.95) {
          path.x = width * 0.5;
          path.y = height * (0.2 + Math.random() * 0.6);
          path.history.length = 0;
        }
        path.history.push(path.x, path.y);
        if (path.history.length > maxHistory * 2) {
          path.history.splice(0, path.history.length - maxHistory * 2);
        }

        ctx.strokeStyle = `rgba(25,25,25,${0.04 + 0.12 * (i / paths.length)})`;
        ctx.beginPath();
        const pts = path.history;
        for (let j = 0; j < pts.length; j += 2) {
          const x = pts[j];
          const y = pts[j + 1];
          if (j === 0) ctx.moveTo(x, y);
          else ctx.lineTo(x, y);
        }
        ctx.stroke();
      }

      rafRef.current = requestAnimationFrame(render);
    };

    rafRef.current = requestAnimationFrame(render);

    return () => {
      if (rafRef.current) cancelAnimationFrame(rafRef.current);
      ctx.clearRect(0, 0, width, height);
    };
  }, [width, height]);

  return (
    <div style={{ width: `${width}px`, height: `${height}px`, background: '#F0EEE6', overflow: 'hidden' }}>
      <canvas ref={canvasRef} width={width} height={height} style={{ width: '100%', height: '100%' }} />
    </div>
  );
};

const metadata = {
  themes: 'milstein,sde,veil',
  visualisation: 'Milstein-integrated paths drift into a soft veil',
  promptSuggestion: '1. Observe stochastic paths smoothing forward\n2. Imagine noise guided by Milstein\n3. Let the veil of random motion calm you'
};
(MilsteinDriftVeil as any).metadata = metadata;

export default MilsteinDriftVeil;

// Differs from others by: Uses the Milstein integrator for stochastic differential equations to generate drifting path trails.
